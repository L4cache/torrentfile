{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TorrentFile \ud83c\udf10 Overview A simple and convenient tool for creating, reviewing, editing, and/or checking bittorrent meta files (aka torrent files). torrentfile supports all versions of Bittorrent files, including hybrid meta files. A GUI frontend for this project can be found at https://github.com/alexpdev/TorrentfileQt \ud83d\udd0c Requirements Python 3.7+ Tested on Linux and Windows \ud83d\udcbb Install via PyPi: pip install torrentfile via Git: git clone https://github.com/alexpdev/torrentfile.git cd torrentfile python setup.py install Download pre-compiled binaries from the release page . \ud83d\udcda Documentation Documentation can be found here or in the docs directory. torrentfile is under active development, and is subject to significant changes in it's codebase between releases. \ud83d\ude80 Usage torrentfile [-h] [-i] [-V] [-v] ... Sub-Commands: create Create a new torrent file. check Check if file/folder contents match a torrent file. edit Edit a pre-existing torrent file. magnet Create Magnet URI for an existing torrent meta file. optional arguments: -h, --help show this help message and exit -V, --version show program version and exit -i, --interactive select program options interactively -v, --verbose output debug information Usage examples can be found in the project documentation on the examples page. \ud83d\udcdd License Distributed under the GNU LGPL v3. See LICENSE for more information. \ud83d\udca1 Issues If you encounter any bugs or would like to request a new feature please open a new issue. https://github.com/alexpdev/torrentfile/issues \u2699\ufe0f CLI Usage Examples More examples can be found in the documentation. Creating Torrents Using the sub-command create or c TorrentFile can create a new torrent from the contents of a file or directory path. The following examples illustrate some of the options available for creating torrents (AKA meta files). Create a torrent from any file or directory. example ( /path/to/content ) by default the save path will be the content path with a \".torrent\" extension. ( /path/to/content.torrent ) by default torrents are created using bittorrent meta-version 1 torrentfile create /path/to/content The -t or --tracker flag adds one or more urls to tracker list. This flag will cause an error if the content path immediately follows it. do this torrentfile create /path/to/content --tracker http://tracker1.com or this torrentfile create -t http://tracker2 http://tracker3 --private /path/to/content not this torrentfile create --tracker http://tracker /path/to/content #ERROR torrentfile create -t http://tracker1 http://tracker2 /path/to/content #ERROR the --private flag indicates use by a private tracker the --source flag can be used to help with cross-seeding torrentfile create --private --source /path/to/content --tracker https://tracker/url to turn off the progress bar shown use --noprogress this can improve the performance by a very small amount torrentfile -t http://tracker.com --noprogress to specify the save location use the -o or --out flags torrentfile create -o /specific/path/name.torrent ./content to create files using bittorrent v2 use --meta-version 2 likewise --meta-version 3 creates a hybrid torrent file. torrentfile create --meta-version 2 /path/to/content torrentfile create --meta-version 3 /path/to/content to output a magnet URI for the created torrent file use --magnet torrentfile create --t https://tracker1/annc https://tracker2/annc --magnet /path/to/content Check/Recheck Torrent Using the sub-command recheck or check or r you can check the percentage of a torrent is saved to disk by comparing the the contents to a torrent metafile. recheck torrent file /path/to/some.torrent with /path/to/content enter the metafile path first then the content path (the order matters) torrentfile recheck /path/to/some.torrent /path/to/content Edit Torrent Using the sub-command edit or e enables editting a pre-existing torrent file. The edit sub-command works the same as the create sub-command and accepts many of the same arguments. Create Magnet To create a magnet URI for a pre-existing torrent meta file, use the sub-command magnet or m with the path to the torrent file. torrentfile magnet /path/to/some.torrent Interactive Mode Alternatively to supplying a bunch of command line arguments, interactive mode allows users to specify program options one at a time from a series of prompts. to activate interactive mode use -i or --interactive flag torrentfile -i","title":"HOME"},{"location":"#torrentfile","text":"","title":"TorrentFile"},{"location":"#overview","text":"A simple and convenient tool for creating, reviewing, editing, and/or checking bittorrent meta files (aka torrent files). torrentfile supports all versions of Bittorrent files, including hybrid meta files. A GUI frontend for this project can be found at https://github.com/alexpdev/TorrentfileQt","title":"\ud83c\udf10 Overview"},{"location":"#requirements","text":"Python 3.7+ Tested on Linux and Windows","title":"\ud83d\udd0c Requirements"},{"location":"#install","text":"via PyPi: pip install torrentfile via Git: git clone https://github.com/alexpdev/torrentfile.git cd torrentfile python setup.py install Download pre-compiled binaries from the release page .","title":"\ud83d\udcbb Install"},{"location":"#documentation","text":"Documentation can be found here or in the docs directory. torrentfile is under active development, and is subject to significant changes in it's codebase between releases.","title":"\ud83d\udcda Documentation"},{"location":"#usage","text":"torrentfile [-h] [-i] [-V] [-v] ... Sub-Commands: create Create a new torrent file. check Check if file/folder contents match a torrent file. edit Edit a pre-existing torrent file. magnet Create Magnet URI for an existing torrent meta file. optional arguments: -h, --help show this help message and exit -V, --version show program version and exit -i, --interactive select program options interactively -v, --verbose output debug information Usage examples can be found in the project documentation on the examples page.","title":"\ud83d\ude80 Usage"},{"location":"#license","text":"Distributed under the GNU LGPL v3. See LICENSE for more information.","title":"\ud83d\udcdd License"},{"location":"#issues","text":"If you encounter any bugs or would like to request a new feature please open a new issue. https://github.com/alexpdev/torrentfile/issues","title":"\ud83d\udca1 Issues"},{"location":"#cli-usage-examples","text":"More examples can be found in the documentation.","title":"\u2699\ufe0f CLI Usage Examples"},{"location":"#creating-torrents","text":"Using the sub-command create or c TorrentFile can create a new torrent from the contents of a file or directory path. The following examples illustrate some of the options available for creating torrents (AKA meta files). Create a torrent from any file or directory. example ( /path/to/content ) by default the save path will be the content path with a \".torrent\" extension. ( /path/to/content.torrent ) by default torrents are created using bittorrent meta-version 1 torrentfile create /path/to/content The -t or --tracker flag adds one or more urls to tracker list. This flag will cause an error if the content path immediately follows it. do this torrentfile create /path/to/content --tracker http://tracker1.com or this torrentfile create -t http://tracker2 http://tracker3 --private /path/to/content not this torrentfile create --tracker http://tracker /path/to/content #ERROR torrentfile create -t http://tracker1 http://tracker2 /path/to/content #ERROR the --private flag indicates use by a private tracker the --source flag can be used to help with cross-seeding torrentfile create --private --source /path/to/content --tracker https://tracker/url to turn off the progress bar shown use --noprogress this can improve the performance by a very small amount torrentfile -t http://tracker.com --noprogress to specify the save location use the -o or --out flags torrentfile create -o /specific/path/name.torrent ./content to create files using bittorrent v2 use --meta-version 2 likewise --meta-version 3 creates a hybrid torrent file. torrentfile create --meta-version 2 /path/to/content torrentfile create --meta-version 3 /path/to/content to output a magnet URI for the created torrent file use --magnet torrentfile create --t https://tracker1/annc https://tracker2/annc --magnet /path/to/content","title":"Creating Torrents"},{"location":"#checkrecheck-torrent","text":"Using the sub-command recheck or check or r you can check the percentage of a torrent is saved to disk by comparing the the contents to a torrent metafile. recheck torrent file /path/to/some.torrent with /path/to/content enter the metafile path first then the content path (the order matters) torrentfile recheck /path/to/some.torrent /path/to/content","title":"Check/Recheck Torrent"},{"location":"#edit-torrent","text":"Using the sub-command edit or e enables editting a pre-existing torrent file. The edit sub-command works the same as the create sub-command and accepts many of the same arguments.","title":"Edit Torrent"},{"location":"#create-magnet","text":"To create a magnet URI for a pre-existing torrent meta file, use the sub-command magnet or m with the path to the torrent file. torrentfile magnet /path/to/some.torrent","title":"Create Magnet"},{"location":"#interactive-mode","text":"Alternatively to supplying a bunch of command line arguments, interactive mode allows users to specify program options one at a time from a series of prompts. to activate interactive mode use -i or --interactive flag torrentfile -i","title":"Interactive Mode"},{"location":"API/","text":"TorrentFile API Documentation Torrent Module module torrentfile. torrent Classes and procedures pertaining to the creation of torrent meta files. Classes TorrentFile construct .torrent file. TorrentFileV2 construct .torrent v2 files using provided data. MetaFile base class for all MetaFile classes. Constants BLOCK_SIZE : int size of leaf hashes for merkle tree. HASH_SIZE : int Length of a sha256 hash. Bittorrent V2 From Bittorrent.org Documentation pages. Implementation details for Bittorrent Protocol v2. Note All strings in a .torrent file that contain text must be UTF-8 encoded. Meta Version 2 Dictionary: \"announce\": The URL of the tracker. \"info\": This maps to a dictionary, with keys described below. \"name\": A display name for the torrent. It is purely advisory. \"piece length\": The number of bytes that each logical piece in the peer protocol refers to. I.e. it sets the granularity of piece, request, bitfield and have messages. It must be a power of two and at least 6KiB. \"meta version\": An integer value, set to 2 to indicate compatibility with the current revision of this specification. Version 1 is not assigned to avoid confusion with BEP3. Future revisions will only increment this issue to indicate an incompatible change has been made, for example that hash algorithms were changed due to newly discovered vulnerabilities. Lementations must check this field first and indicate that a torrent is of a newer version than they can handle before performing other idations which may result in more general messages about invalid files. Files are mapped into this piece address space so that each non-empty \"file tree\": A tree of dictionaries where dictionary keys represent UTF-8 encoded path elements. Entries with zero-length keys describe the properties of the composed path at that point. 'UTF-8 encoded' context only means that if the native encoding is known at creation time it must be converted to UTF-8. Keys may contain invalid UTF-8 sequences or characters and names that are reserved on specific filesystems. Implementations must be prepared to sanitize them. On platforms path components exactly matching '.' and '..' must be sanitized since they could lead to directory traversal attacks and conflicting path descriptions. On platforms that require UTF-8 path components this sanitizing step must happen after normalizing overlong UTF-8 encodings. File is aligned to a piece boundary and occurs in same order as the file tree. The last piece of each file may be shorter than the specified piece length, resulting in an alignment gap. \"length\": Length of the file in bytes. Presence of this field indicates that the dictionary describes a file, not a directory. Which means it must not have any sibling entries. \"pieces root\": For non-empty files this is the the root hash of a merkle tree with a branching factor of 2, constructed from 16KiB blocks of the file. The last block may be shorter than 16KiB. The remaining leaf hashes beyond the end of the file required to construct upper layers of the merkle tree are set to zero. As of meta version 2 SHA2-256 is used as digest function for the merkle tree. The hash is stored in its binary form, not as human-readable string. \"piece layers\": A dictionary of strings. For each file in the file tree that is larger than the piece size it contains one string value. The keys are the merkle roots while the values consist of concatenated hashes of one layer within that merkle tree. The layer is chosen so that one hash covers piece length bytes. For example if the piece size is 16KiB then the leaf hashes are used. If a piece size of 128KiB is used then 3rd layer up from the leaf hashes is used. Layer hashes which exclusively cover data beyond the end of file, i.e. are only needed to balance the tree, are omitted. All hashes are stored in their binary format. A torrent is not valid if this field is absent, the contained hashes do not match the merkle roots or are not from the correct layer. Important The file tree root dictionary itself must not be a file, i.e. it must not contain a zero-length key with a dictionary containing a length key. Bittorrent V1 v1 meta-dictionary announce: The URL of the tracker. info: This maps to a dictionary, with keys described below. name : maps to a UTF-8 encoded string which is the suggested name to save the file (or directory) as. It is purely advisory. piece length : maps to the number of bytes in each piece the file is split into. For the purposes of transfer, files are split into fixed-size pieces which are all the same length except for possibly the last one which may be truncated. piece length : is almost always a power of two, most commonly 2^18 = 256 K pieces : maps to a string whose length is a multiple of 20. It is to be subdivided into strings of length 20, each of which is the SHA1 hash of the piece at the corresponding index. length : In the single file case, maps to the length of the file in bytes. files : If present then the download represents a single file, otherwise it represents a set of files which go in a directory structure. For the purposes of the other keys, the multi-file case is treated as only having a single file by concatenating the files in the order they appear in the files list. The files list is the value files maps to, and is a list of dictionaries containing the following keys: path : A list of UTF-8 encoded strings corresponding to subdirectory names, the last of which is the actual file name length : Maps to the length of the file in bytes. length : Only present if the torrent contents is a single file. Maps to the length of the file in bytes. Note In the single file case, the name key is the name of a file, in the muliple file case, it's the name of a directory. Classes MetaFile \u2014 Base Class for all TorrentFile classes. TorrentFile \u2014 Class for creating Bittorrent meta files. TorrentFileV2 \u2014 Class for creating Bittorrent meta v2 files. TorrentFileHybrid \u2014 Construct the Hybrid torrent meta file with provided parameters. ------ Utils Module module torrentfile. utils Utility functions and classes used throughout package. Functions: get_piece_length: calculate ideal piece length for torrent file. sortfiles: traverse directory in sorted order yielding paths encountered. path_size: Sum the sizes of each file in path. get_file_list: Return list of all files contained in directory. path_stat: Get ideal piece length, total size, and file list for directory. path_piece_length: Get ideal piece length based on size of directory. Classes MissingPathError \u2014 Path parameter is required to specify target content. PieceLengthValueError \u2014 Piece Length parameter must equal a perfect power of 2. Functions filelist_total ( pathstring ) (os.PathLike) \u2014 Perform error checking and format conversion to os.PathLike. get_file_list ( path ) (list) \u2014 Return a sorted list of file paths contained in directory. get_piece_length ( size ) (int) \u2014 Calculate the ideal piece length for bittorrent data. humanize_bytes ( amount ) (str) \u2014 Convert integer into human readable memory sized denomination. next_power_2 ( value ) (int) \u2014 Calculate the next perfect power of 2 equal to or greater than value. normalize_piece_length ( piece_length ) (int) \u2014 Verify input piece_length is valid and convert accordingly. path_piece_length ( path ) (int) \u2014 Calculate piece length for input path and contents. path_size ( path ) (int) \u2014 Return the total size of all files in path recursively. path_stat ( path ) (list) \u2014 Calculate directory statistics. ------ Edit Module module torrentfile. edit Edit torrent module. Provides a facility by which certain properties of a torrent meta file can be edited by the user. The various command line arguments indicate which fields should be edited, and what the new value should be. Depending on what fields are chosen to edit, this command can trigger a new info hash which means the torrent will no longer be able to participate in the same swarm as the original unedited torrent. Keywords private comment source trackers web-seeds Functions edit_torrent ( metafile , args ) (dict) \u2014 Edit the properties and values in a torrent meta file. filter_empty ( args , meta , info ) \u2014 Remove dictionary keys with empty values. ------ Interactive Module module torrentfile. interactive Module contains the procedures used for Interactive Mode. Classes InteractiveEditor \u2014 Interactive dialog class for torrent editing. InteractiveCreator \u2014 Class namespace for interactive program options. Functions create_torrent ( ) \u2014 Create new torrent file interactively. edit_action ( ) \u2014 Edit the editable values of the torrent meta file. get_input ( *args ) (str) \u2014 Determine appropriate input function to call. recheck_torrent ( ) \u2014 Check torrent download completed percentage. select_action ( ) \u2014 Operate TorrentFile program interactively through terminal. showcenter ( txt ) \u2014 Prints text to screen in the center position of the terminal. showtext ( txt ) \u2014 Print contents of txt to screen. ------ CLI Module module torrentfile. cli Command Line Interface for TorrentFile project. This module provides the primary command line argument parser for the torrentfile package. The main_script function is automatically invoked when called from command line, and parses accompanying arguments. Functions: main_script: process command line arguments and run program. Classes TorrentFileHelpFormatter \u2014 Formatting class for help tips provided by the CLI. Functions create_command ( args ) (torrentfile.MetaFile) \u2014 Execute the create CLI sub-command to create a new torrent metafile. create_magnet ( metafile ) (str) \u2014 Create a magnet URI from a Bittorrent meta file. edit_command ( args ) (str) \u2014 Execute the edit CLI sub-command with provided arguments. main ( ) \u2014 Initiate main function for CLI script. main_script ( args ) \u2014 Initialize Command Line Interface for torrentfile. recheck_command ( args ) (str) \u2014 Execute recheck CLI sub-command. ------ Recheck Module module torrentfile. recheck Module container Checker Class. The CheckerClass takes a torrentfile and tha path to it's contents. It will then iterate through every file and directory contained and compare their data to values contained within the torrent file. Completion percentages will be printed to screen for each file and at the end for the torrentfile as a whole. Classes Checker \u2014 Check a given file or directory to see if it matches a torrentfile. FeedChecker \u2014 Validates torrent content. HashChecker \u2014 Verify that root hashes of content files match the .torrent files. ------ Hasher Module module torrentfile. hasher Piece/File Hashers for Bittorrent meta file contents. Classes Hasher \u2014 Piece hasher for Bittorrent V1 files. HasherV2 \u2014 Calculate the root hash and piece layers for file contents. HasherHybrid \u2014 Calculate root and piece hashes for creating hybrid torrent file. Functions merkle_root ( blocks ) (bytes) \u2014 Calculate the merkle root for a seq of sha256 hash digests.","title":"API"},{"location":"API/#torrentfile-api-documentation","text":"","title":"TorrentFile API Documentation"},{"location":"API/#torrent-module","text":"module torrentfile. torrent Classes and procedures pertaining to the creation of torrent meta files.","title":"Torrent Module"},{"location":"API/#classes","text":"TorrentFile construct .torrent file. TorrentFileV2 construct .torrent v2 files using provided data. MetaFile base class for all MetaFile classes.","title":"Classes"},{"location":"API/#constants","text":"BLOCK_SIZE : int size of leaf hashes for merkle tree. HASH_SIZE : int Length of a sha256 hash.","title":"Constants"},{"location":"API/#bittorrent-v2","text":"From Bittorrent.org Documentation pages. Implementation details for Bittorrent Protocol v2. Note All strings in a .torrent file that contain text must be UTF-8 encoded.","title":"Bittorrent V2"},{"location":"API/#meta-version-2-dictionary","text":"\"announce\": The URL of the tracker. \"info\": This maps to a dictionary, with keys described below. \"name\": A display name for the torrent. It is purely advisory. \"piece length\": The number of bytes that each logical piece in the peer protocol refers to. I.e. it sets the granularity of piece, request, bitfield and have messages. It must be a power of two and at least 6KiB. \"meta version\": An integer value, set to 2 to indicate compatibility with the current revision of this specification. Version 1 is not assigned to avoid confusion with BEP3. Future revisions will only increment this issue to indicate an incompatible change has been made, for example that hash algorithms were changed due to newly discovered vulnerabilities. Lementations must check this field first and indicate that a torrent is of a newer version than they can handle before performing other idations which may result in more general messages about invalid files. Files are mapped into this piece address space so that each non-empty \"file tree\": A tree of dictionaries where dictionary keys represent UTF-8 encoded path elements. Entries with zero-length keys describe the properties of the composed path at that point. 'UTF-8 encoded' context only means that if the native encoding is known at creation time it must be converted to UTF-8. Keys may contain invalid UTF-8 sequences or characters and names that are reserved on specific filesystems. Implementations must be prepared to sanitize them. On platforms path components exactly matching '.' and '..' must be sanitized since they could lead to directory traversal attacks and conflicting path descriptions. On platforms that require UTF-8 path components this sanitizing step must happen after normalizing overlong UTF-8 encodings. File is aligned to a piece boundary and occurs in same order as the file tree. The last piece of each file may be shorter than the specified piece length, resulting in an alignment gap. \"length\": Length of the file in bytes. Presence of this field indicates that the dictionary describes a file, not a directory. Which means it must not have any sibling entries. \"pieces root\": For non-empty files this is the the root hash of a merkle tree with a branching factor of 2, constructed from 16KiB blocks of the file. The last block may be shorter than 16KiB. The remaining leaf hashes beyond the end of the file required to construct upper layers of the merkle tree are set to zero. As of meta version 2 SHA2-256 is used as digest function for the merkle tree. The hash is stored in its binary form, not as human-readable string. \"piece layers\": A dictionary of strings. For each file in the file tree that is larger than the piece size it contains one string value. The keys are the merkle roots while the values consist of concatenated hashes of one layer within that merkle tree. The layer is chosen so that one hash covers piece length bytes. For example if the piece size is 16KiB then the leaf hashes are used. If a piece size of 128KiB is used then 3rd layer up from the leaf hashes is used. Layer hashes which exclusively cover data beyond the end of file, i.e. are only needed to balance the tree, are omitted. All hashes are stored in their binary format. A torrent is not valid if this field is absent, the contained hashes do not match the merkle roots or are not from the correct layer. Important The file tree root dictionary itself must not be a file, i.e. it must not contain a zero-length key with a dictionary containing a length key.","title":"Meta Version 2 Dictionary:"},{"location":"API/#bittorrent-v1","text":"","title":"Bittorrent V1"},{"location":"API/#v1-meta-dictionary","text":"announce: The URL of the tracker. info: This maps to a dictionary, with keys described below. name : maps to a UTF-8 encoded string which is the suggested name to save the file (or directory) as. It is purely advisory. piece length : maps to the number of bytes in each piece the file is split into. For the purposes of transfer, files are split into fixed-size pieces which are all the same length except for possibly the last one which may be truncated. piece length : is almost always a power of two, most commonly 2^18 = 256 K pieces : maps to a string whose length is a multiple of 20. It is to be subdivided into strings of length 20, each of which is the SHA1 hash of the piece at the corresponding index. length : In the single file case, maps to the length of the file in bytes. files : If present then the download represents a single file, otherwise it represents a set of files which go in a directory structure. For the purposes of the other keys, the multi-file case is treated as only having a single file by concatenating the files in the order they appear in the files list. The files list is the value files maps to, and is a list of dictionaries containing the following keys: path : A list of UTF-8 encoded strings corresponding to subdirectory names, the last of which is the actual file name length : Maps to the length of the file in bytes. length : Only present if the torrent contents is a single file. Maps to the length of the file in bytes. Note In the single file case, the name key is the name of a file, in the muliple file case, it's the name of a directory. Classes MetaFile \u2014 Base Class for all TorrentFile classes. TorrentFile \u2014 Class for creating Bittorrent meta files. TorrentFileV2 \u2014 Class for creating Bittorrent meta v2 files. TorrentFileHybrid \u2014 Construct the Hybrid torrent meta file with provided parameters.","title":"v1 meta-dictionary"},{"location":"API/#-","text":"","title":"------"},{"location":"API/#utils-module","text":"module torrentfile. utils Utility functions and classes used throughout package. Functions: get_piece_length: calculate ideal piece length for torrent file. sortfiles: traverse directory in sorted order yielding paths encountered. path_size: Sum the sizes of each file in path. get_file_list: Return list of all files contained in directory. path_stat: Get ideal piece length, total size, and file list for directory. path_piece_length: Get ideal piece length based on size of directory. Classes MissingPathError \u2014 Path parameter is required to specify target content. PieceLengthValueError \u2014 Piece Length parameter must equal a perfect power of 2. Functions filelist_total ( pathstring ) (os.PathLike) \u2014 Perform error checking and format conversion to os.PathLike. get_file_list ( path ) (list) \u2014 Return a sorted list of file paths contained in directory. get_piece_length ( size ) (int) \u2014 Calculate the ideal piece length for bittorrent data. humanize_bytes ( amount ) (str) \u2014 Convert integer into human readable memory sized denomination. next_power_2 ( value ) (int) \u2014 Calculate the next perfect power of 2 equal to or greater than value. normalize_piece_length ( piece_length ) (int) \u2014 Verify input piece_length is valid and convert accordingly. path_piece_length ( path ) (int) \u2014 Calculate piece length for input path and contents. path_size ( path ) (int) \u2014 Return the total size of all files in path recursively. path_stat ( path ) (list) \u2014 Calculate directory statistics.","title":"Utils Module"},{"location":"API/#-_1","text":"","title":"------"},{"location":"API/#edit-module","text":"module torrentfile. edit Edit torrent module. Provides a facility by which certain properties of a torrent meta file can be edited by the user. The various command line arguments indicate which fields should be edited, and what the new value should be. Depending on what fields are chosen to edit, this command can trigger a new info hash which means the torrent will no longer be able to participate in the same swarm as the original unedited torrent.","title":"Edit Module"},{"location":"API/#keywords","text":"private comment source trackers web-seeds Functions edit_torrent ( metafile , args ) (dict) \u2014 Edit the properties and values in a torrent meta file. filter_empty ( args , meta , info ) \u2014 Remove dictionary keys with empty values.","title":"Keywords"},{"location":"API/#-_2","text":"","title":"------"},{"location":"API/#interactive-module","text":"module torrentfile. interactive Module contains the procedures used for Interactive Mode. Classes InteractiveEditor \u2014 Interactive dialog class for torrent editing. InteractiveCreator \u2014 Class namespace for interactive program options. Functions create_torrent ( ) \u2014 Create new torrent file interactively. edit_action ( ) \u2014 Edit the editable values of the torrent meta file. get_input ( *args ) (str) \u2014 Determine appropriate input function to call. recheck_torrent ( ) \u2014 Check torrent download completed percentage. select_action ( ) \u2014 Operate TorrentFile program interactively through terminal. showcenter ( txt ) \u2014 Prints text to screen in the center position of the terminal. showtext ( txt ) \u2014 Print contents of txt to screen.","title":"Interactive Module"},{"location":"API/#-_3","text":"","title":"------"},{"location":"API/#cli-module","text":"module torrentfile. cli Command Line Interface for TorrentFile project. This module provides the primary command line argument parser for the torrentfile package. The main_script function is automatically invoked when called from command line, and parses accompanying arguments. Functions: main_script: process command line arguments and run program. Classes TorrentFileHelpFormatter \u2014 Formatting class for help tips provided by the CLI. Functions create_command ( args ) (torrentfile.MetaFile) \u2014 Execute the create CLI sub-command to create a new torrent metafile. create_magnet ( metafile ) (str) \u2014 Create a magnet URI from a Bittorrent meta file. edit_command ( args ) (str) \u2014 Execute the edit CLI sub-command with provided arguments. main ( ) \u2014 Initiate main function for CLI script. main_script ( args ) \u2014 Initialize Command Line Interface for torrentfile. recheck_command ( args ) (str) \u2014 Execute recheck CLI sub-command.","title":"CLI Module"},{"location":"API/#-_4","text":"","title":"------"},{"location":"API/#recheck-module","text":"module torrentfile. recheck Module container Checker Class. The CheckerClass takes a torrentfile and tha path to it's contents. It will then iterate through every file and directory contained and compare their data to values contained within the torrent file. Completion percentages will be printed to screen for each file and at the end for the torrentfile as a whole. Classes Checker \u2014 Check a given file or directory to see if it matches a torrentfile. FeedChecker \u2014 Validates torrent content. HashChecker \u2014 Verify that root hashes of content files match the .torrent files.","title":"Recheck Module"},{"location":"API/#-_5","text":"","title":"------"},{"location":"API/#hasher-module","text":"module torrentfile. hasher Piece/File Hashers for Bittorrent meta file contents. Classes Hasher \u2014 Piece hasher for Bittorrent V1 files. HasherV2 \u2014 Calculate the root hash and piece layers for file contents. HasherHybrid \u2014 Calculate root and piece hashes for creating hybrid torrent file. Functions merkle_root ( blocks ) (bytes) \u2014 Calculate the merkle root for a seq of sha256 hash digests.","title":"Hasher Module"},{"location":"Commands/","text":"TorrentFile CLI Menu Help Messages Main Usage ===== torrentfile [-h] [-i] [-V] [-v] <create> <edit> <magnet> <recheck> ... CLI utility for editing, creating, checking, and other useful tools for Bittorrent meta files. TorrentFile supports all versions of torrent files. Optional Arguments ------------------ -h, --help show this help message and exit -i, --interactive select program options interactively -V, --version show program version and exit -v, --verbose output debug information Actions ------- <create> <edit> <magnet> <recheck> c (create, new) Create a torrent meta file. e (edit) Edit existing torrent meta file. m (magnet) Create magnet url from an existing Bittorrent meta file. r (recheck, check) Calculate amount of torrent meta file's content is found on disk. Create Usage ===== torrentfile c [-h] [-a <url> [<url> ...]] [-p] [-s <source>] [-m] [-c <comment>] [-o <path>] [-t <url> [<url> ...]] [--noprogress] [--meta-version <int>] [--piece-length <int>] [-w <url> [<url> ...]] <content> Positional Arguments -------------------- <content> Path to content file or directory Optional Arguments ------------------ -h, --help show this help message and exit -a <url> [<url> ...], --announce <url> [<url> ...] Alias for -t/--tracker -p, --private Create a private torrent file -s <source>, --source <source> Useful for cross-seeding -m, --magnet Output Magnet Link after creation completes -c <comment>, --comment <comment> Include a comment in file metadata -o <path>, --out <path> Output path for created .torrent file -t <url> [<url> ...], --tracker <url> [<url> ...] One or more Bittorrent tracker announce url(s). --noprogress Disable showing the progress bar during torrent creation. (Minimially improves performance of torrent file creation.) --meta-version <int> Bittorrent metafile version. Options - {1, 2, 3} (1) = Bittorrent v1 (Default) (2) = Bittorrent v2 (3) = Bittorrent v1 & v2 hybrid --piece-length <int> Number of bytes per piece. (Default: None) Acceptable inputs include {14 - 24} as exponent for 2^n, or any acceptable integer value (must be power of 2). Examples:: [--piece-length 14] [--piece-length 16777216] -w <url> [<url> ...], --web-seed <url> [<url> ...] One or more url(s) linking to a http server hosting the torrent contents. This is useful if the torrent tracker is ever unreachable. Example:: -w url1 url2 url3 Edit Usage ===== torrentfile e [-h] [--tracker <url> [<url> ...]] [--web-seed <url> [<url> ...]] [--private] [--comment <comment>] [--source <source>] <*.torrent> Positional Arguments -------------------- <*.torrent> path to *.torrent file Optional Arguments ------------------ -h, --help show this help message and exit --tracker <url> [<url> ...] Replace current list of tracker/announce urls with one or more space seperated Bittorrent tracker announce url(s). --web-seed <url> [<url> ...] Replace current list of web-seed urls with one or more space seperated url(s) --private Make torrent private. --comment <comment> Replaces any existing comment with <comment> --source <source> Replaces current source with <source> Recheck Usage ===== torrentfile r [-h] <*.torrent> <content> Positional Arguments -------------------- <*.torrent> path to .torrent file. <content> path to content file or directory Optional Arguments ------------------ -h, --help show this help message and exit Magnet Usage ===== torrentfile m [-h] <*.torrent> Positional Arguments -------------------- <*.torrent> Path to Bittorrent meta file. Optional Arguments ------------------ -h, --help show this help message and exit","title":"CLI"},{"location":"Commands/#torrentfile-cli-menu","text":"","title":"TorrentFile CLI Menu"},{"location":"Commands/#help-messages","text":"","title":"Help Messages"},{"location":"Commands/#main","text":"Usage ===== torrentfile [-h] [-i] [-V] [-v] <create> <edit> <magnet> <recheck> ... CLI utility for editing, creating, checking, and other useful tools for Bittorrent meta files. TorrentFile supports all versions of torrent files. Optional Arguments ------------------ -h, --help show this help message and exit -i, --interactive select program options interactively -V, --version show program version and exit -v, --verbose output debug information Actions ------- <create> <edit> <magnet> <recheck> c (create, new) Create a torrent meta file. e (edit) Edit existing torrent meta file. m (magnet) Create magnet url from an existing Bittorrent meta file. r (recheck, check) Calculate amount of torrent meta file's content is found on disk.","title":"Main"},{"location":"Commands/#create","text":"Usage ===== torrentfile c [-h] [-a <url> [<url> ...]] [-p] [-s <source>] [-m] [-c <comment>] [-o <path>] [-t <url> [<url> ...]] [--noprogress] [--meta-version <int>] [--piece-length <int>] [-w <url> [<url> ...]] <content> Positional Arguments -------------------- <content> Path to content file or directory Optional Arguments ------------------ -h, --help show this help message and exit -a <url> [<url> ...], --announce <url> [<url> ...] Alias for -t/--tracker -p, --private Create a private torrent file -s <source>, --source <source> Useful for cross-seeding -m, --magnet Output Magnet Link after creation completes -c <comment>, --comment <comment> Include a comment in file metadata -o <path>, --out <path> Output path for created .torrent file -t <url> [<url> ...], --tracker <url> [<url> ...] One or more Bittorrent tracker announce url(s). --noprogress Disable showing the progress bar during torrent creation. (Minimially improves performance of torrent file creation.) --meta-version <int> Bittorrent metafile version. Options - {1, 2, 3} (1) = Bittorrent v1 (Default) (2) = Bittorrent v2 (3) = Bittorrent v1 & v2 hybrid --piece-length <int> Number of bytes per piece. (Default: None) Acceptable inputs include {14 - 24} as exponent for 2^n, or any acceptable integer value (must be power of 2). Examples:: [--piece-length 14] [--piece-length 16777216] -w <url> [<url> ...], --web-seed <url> [<url> ...] One or more url(s) linking to a http server hosting the torrent contents. This is useful if the torrent tracker is ever unreachable. Example:: -w url1 url2 url3","title":"Create"},{"location":"Commands/#edit","text":"Usage ===== torrentfile e [-h] [--tracker <url> [<url> ...]] [--web-seed <url> [<url> ...]] [--private] [--comment <comment>] [--source <source>] <*.torrent> Positional Arguments -------------------- <*.torrent> path to *.torrent file Optional Arguments ------------------ -h, --help show this help message and exit --tracker <url> [<url> ...] Replace current list of tracker/announce urls with one or more space seperated Bittorrent tracker announce url(s). --web-seed <url> [<url> ...] Replace current list of web-seed urls with one or more space seperated url(s) --private Make torrent private. --comment <comment> Replaces any existing comment with <comment> --source <source> Replaces current source with <source>","title":"Edit"},{"location":"Commands/#recheck","text":"Usage ===== torrentfile r [-h] <*.torrent> <content> Positional Arguments -------------------- <*.torrent> path to .torrent file. <content> path to content file or directory Optional Arguments ------------------ -h, --help show this help message and exit","title":"Recheck"},{"location":"Commands/#magnet","text":"Usage ===== torrentfile m [-h] <*.torrent> Positional Arguments -------------------- <*.torrent> Path to Bittorrent meta file. Optional Arguments ------------------ -h, --help show this help message and exit","title":"Magnet"},{"location":"LGPLv3/","text":"GNU Lesser General Public License Version 3, 29 June 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. < http://fsf.org/ > Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below. 0. Additional Definitions As used herein, \u201cthis License\u201d refers to version 3 of the GNU Lesser General Public License, and the \u201cGNU GPL\u201d refers to version 3 of the GNU General Public License. \u201cThe Library\u201d refers to a covered work governed by this License, other than an Application or a Combined Work as defined below. An \u201cApplication\u201d is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library. A \u201cCombined Work\u201d is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the \u201cLinked Version\u201d. The \u201cMinimal Corresponding Source\u201d for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version. The \u201cCorresponding Application Code\u201d for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work. 1. Exception to Section 3 of the GNU GPL You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL. 2. Conveying Modified Versions If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version: a) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs whatever part of its purpose remains meaningful, or b) under the GNU GPL, with none of the additional permissions of this License applicable to that copy. 3. Object Code Incorporating Material from Library Header Files The object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following: a) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the object code with a copy of the GNU GPL and this license document. 4. Combined Works You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following: a) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the Combined Work with a copy of the GNU GPL and this license document. c) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document. d) Do one of the following: . 0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source. . 1) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version. e) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0 , the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1 , you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.) 5. Combined Libraries You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following: a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License. b) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work. 6. Revised Versions of the GNU Lesser General Public License The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation. If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library.","title":"LICENSE"},{"location":"LGPLv3/#gnu-lesser-general-public-license","text":"Version 3, 29 June 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. < http://fsf.org/ > Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below.","title":"GNU Lesser General Public License"},{"location":"LGPLv3/#0-additional-definitions","text":"As used herein, \u201cthis License\u201d refers to version 3 of the GNU Lesser General Public License, and the \u201cGNU GPL\u201d refers to version 3 of the GNU General Public License. \u201cThe Library\u201d refers to a covered work governed by this License, other than an Application or a Combined Work as defined below. An \u201cApplication\u201d is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library. A \u201cCombined Work\u201d is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the \u201cLinked Version\u201d. The \u201cMinimal Corresponding Source\u201d for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version. The \u201cCorresponding Application Code\u201d for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work.","title":"0. Additional Definitions"},{"location":"LGPLv3/#1-exception-to-section-3-of-the-gnu-gpl","text":"You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL.","title":"1. Exception to Section 3 of the GNU GPL"},{"location":"LGPLv3/#2-conveying-modified-versions","text":"If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version: a) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs whatever part of its purpose remains meaningful, or b) under the GNU GPL, with none of the additional permissions of this License applicable to that copy.","title":"2. Conveying Modified Versions"},{"location":"LGPLv3/#3-object-code-incorporating-material-from-library-header-files","text":"The object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following: a) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the object code with a copy of the GNU GPL and this license document.","title":"3. Object Code Incorporating Material from Library Header Files"},{"location":"LGPLv3/#4-combined-works","text":"You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following: a) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License. b) Accompany the Combined Work with a copy of the GNU GPL and this license document. c) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document. d) Do one of the following: . 0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source. . 1) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version. e) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0 , the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1 , you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.)","title":"4. Combined Works"},{"location":"LGPLv3/#5-combined-libraries","text":"You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following: a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License. b) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.","title":"5. Combined Libraries"},{"location":"LGPLv3/#6-revised-versions-of-the-gnu-lesser-general-public-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation. If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library.","title":"6. Revised Versions of the GNU Lesser General Public License"},{"location":"changelog/","text":"TorrentFile Version 0.6.11 Fixed bug that occured during recheck when file of 0 length is included. Altered Recheck algorithm to process 0 length files. Only effected meta version 2 and hybrid torrent files. Added unittests to cover the situation. Version 0.6.10 Updates to documentation Integrated Type hints in source code Updated build and CI process Version 0.6.9 The --progress flag is now --noprogress Default behavior is to show progress bar use --noprogress to not show added CLI Help format strings added custom CLI help formatter class Titled Help Message section headers Fixed a bunch of error pages created by mkdocs Version 0.6.8 Documentation for newest features CLI usage examples Improved unittests made progress bar active by default Version 0.6.7 Updates to API Version 0.6.6 bug that created faulty Bittorrent V2 meta files in some instances. back to working as it should. Version 0.6.5 Support for creating Magnet URI's Added optional progress bar for torrent creation Log File handler CLI args page in documentation verbose and logging bugs multi tracker errors bug Version 0.6.4 CLI interface add subcommands added interactive mode Re-wrote the recheck module fixed documentation and docstrings linting and testing errors Version 0.6.3 Fixed Bug that would format list of trackers incorrectly CLI Bug Fixes Version 0.6.2 Bug fixes Documentation error pages Version 0.6.0 cli commands alterations debug logging during creation process Version 0.5.2 Fixed Bug that was adding wrong fields to info dict Version 0.5.0 Slew of new unit tests Stricter linting features Alternative method of -re-check feature Bug Fixes CLI help formatting errors Version 0.4.8 Improved Algorithm performance for ReCheck. Additions to documentation. Version 0.4.7 Fixed A bug that misspelled a field when creating Hybrid torrent files. Re-Check procedure for v2 and hybrid torrent file checking. Version 0.4.6 CLI Help and Usage Messages. Expanded CLI args. Completely new CheckerClass which replaces old Checker Hooks for GUI or other 3rd party apps to hook into Checking Documentation and Unit tests for new CheckerClass Version 0.4.5 Documentation and docstrings improvements Better code formating and more detailed docstrings More unit tests. Version 0.4.2 The ReChecker feature now supports v1, v2, & hybrid .torrent file. Bug in CLI for python < 3.8 Version 0.4.1 Added tests for hybrid class Added logging features new cli flag to activate debug mode Documentation theme. Fixed Bug that allowed improper piece length values. Version 0.4.0 Fixed bugs in creating hybrid files. Bug Fix that broke cli. Version 0.3.0 Added/Improved support for hybrid meta files. Many additions to testing suit including linting and coverage tests. Version 0.2.8 Styling fixes. Bug Fixes. Prelimenary support for bittorrent hybrid meta files. Bug Fixes Version 0.2.7 major imporvements to torrentfile-GUI. minor adjustments to this package for integration. Code consolidation Bug Fixes Documentation additions Implemented CI/CD Integration Version 0.2.3 Bug Fixes Code Style and Formatting Added more unittests Version 0.2.1 Bittorrent Protocol V2 Support v2 metafile options to cli v2 metafile tests Version 0.1.7 Docstrings Improvements. Added documentation rederer. Improved readme file. formatting Version 0.1.2 Added a Command Line Interface Rough Graphical User Interface Minor Bug Fixes Improved unittest coverage Version 0.1.0 added SHA256 support Feeder class for seemless file switching Fixed the primary entrypoint function. Improved docstrings Bug fixes Version 0.0.2 Added Unittests added bencode support added hashing support Version 0.0.1 Initial concept and planning","title":"CHANGELOG"},{"location":"changelog/#torrentfile","text":"","title":"TorrentFile"},{"location":"changelog/#version-0611","text":"Fixed bug that occured during recheck when file of 0 length is included. Altered Recheck algorithm to process 0 length files. Only effected meta version 2 and hybrid torrent files. Added unittests to cover the situation.","title":"Version 0.6.11"},{"location":"changelog/#version-0610","text":"Updates to documentation Integrated Type hints in source code Updated build and CI process","title":"Version 0.6.10"},{"location":"changelog/#version-069","text":"The --progress flag is now --noprogress Default behavior is to show progress bar use --noprogress to not show added CLI Help format strings added custom CLI help formatter class Titled Help Message section headers Fixed a bunch of error pages created by mkdocs","title":"Version 0.6.9"},{"location":"changelog/#version-068","text":"Documentation for newest features CLI usage examples Improved unittests made progress bar active by default","title":"Version 0.6.8"},{"location":"changelog/#version-067","text":"Updates to API","title":"Version 0.6.7"},{"location":"changelog/#version-066","text":"bug that created faulty Bittorrent V2 meta files in some instances. back to working as it should.","title":"Version 0.6.6"},{"location":"changelog/#version-065","text":"Support for creating Magnet URI's Added optional progress bar for torrent creation Log File handler CLI args page in documentation verbose and logging bugs multi tracker errors bug","title":"Version 0.6.5"},{"location":"changelog/#version-064","text":"CLI interface add subcommands added interactive mode Re-wrote the recheck module fixed documentation and docstrings linting and testing errors","title":"Version 0.6.4"},{"location":"changelog/#version-063","text":"Fixed Bug that would format list of trackers incorrectly CLI Bug Fixes","title":"Version 0.6.3"},{"location":"changelog/#version-062","text":"Bug fixes Documentation error pages","title":"Version 0.6.2"},{"location":"changelog/#version-060","text":"cli commands alterations debug logging during creation process","title":"Version 0.6.0"},{"location":"changelog/#version-052","text":"Fixed Bug that was adding wrong fields to info dict","title":"Version 0.5.2"},{"location":"changelog/#version-050","text":"Slew of new unit tests Stricter linting features Alternative method of -re-check feature Bug Fixes CLI help formatting errors","title":"Version 0.5.0"},{"location":"changelog/#version-048","text":"Improved Algorithm performance for ReCheck. Additions to documentation.","title":"Version 0.4.8"},{"location":"changelog/#version-047","text":"Fixed A bug that misspelled a field when creating Hybrid torrent files. Re-Check procedure for v2 and hybrid torrent file checking.","title":"Version 0.4.7"},{"location":"changelog/#version-046","text":"CLI Help and Usage Messages. Expanded CLI args. Completely new CheckerClass which replaces old Checker Hooks for GUI or other 3rd party apps to hook into Checking Documentation and Unit tests for new CheckerClass","title":"Version 0.4.6"},{"location":"changelog/#version-045","text":"Documentation and docstrings improvements Better code formating and more detailed docstrings More unit tests.","title":"Version 0.4.5"},{"location":"changelog/#version-042","text":"The ReChecker feature now supports v1, v2, & hybrid .torrent file. Bug in CLI for python < 3.8","title":"Version 0.4.2"},{"location":"changelog/#version-041","text":"Added tests for hybrid class Added logging features new cli flag to activate debug mode Documentation theme. Fixed Bug that allowed improper piece length values.","title":"Version 0.4.1"},{"location":"changelog/#version-040","text":"Fixed bugs in creating hybrid files. Bug Fix that broke cli.","title":"Version 0.4.0"},{"location":"changelog/#version-030","text":"Added/Improved support for hybrid meta files. Many additions to testing suit including linting and coverage tests.","title":"Version 0.3.0"},{"location":"changelog/#version-028","text":"Styling fixes. Bug Fixes. Prelimenary support for bittorrent hybrid meta files. Bug Fixes","title":"Version 0.2.8"},{"location":"changelog/#version-027","text":"major imporvements to torrentfile-GUI. minor adjustments to this package for integration. Code consolidation Bug Fixes Documentation additions Implemented CI/CD Integration","title":"Version 0.2.7"},{"location":"changelog/#version-023","text":"Bug Fixes Code Style and Formatting Added more unittests","title":"Version 0.2.3"},{"location":"changelog/#version-021","text":"Bittorrent Protocol V2 Support v2 metafile options to cli v2 metafile tests","title":"Version 0.2.1"},{"location":"changelog/#version-017","text":"Docstrings Improvements. Added documentation rederer. Improved readme file. formatting","title":"Version 0.1.7"},{"location":"changelog/#version-012","text":"Added a Command Line Interface Rough Graphical User Interface Minor Bug Fixes Improved unittest coverage","title":"Version 0.1.2"},{"location":"changelog/#version-010","text":"added SHA256 support Feeder class for seemless file switching Fixed the primary entrypoint function. Improved docstrings Bug fixes","title":"Version 0.1.0"},{"location":"changelog/#version-002","text":"Added Unittests added bencode support added hashing support","title":"Version 0.0.2"},{"location":"changelog/#version-001","text":"Initial concept and planning","title":"Version 0.0.1"},{"location":"examples/","text":"TorrentFile CLI Usage Examples Creating Torrents Using the sub-command create or c TorrentFile can create a new torrent from the contents of a file or directory path. The following examples illustrate some of the options available for creating torrents (AKA meta files). Create a torrent from any file or directory. example ( /path/to/content ) by default the save path will be the content path with a \".torrent\" extension. ( /path/to/content.torrent ) by default torrents are created using bittorrent meta-version 1 >torrentfile create /path/to/content The -t or --tracker flag adds one or more urls to tracker list. This flag will cause an error if the content path immediately follows it. do this >torrentfile create /path/to/content --tracker http://tracker1.com or this >torrentfile create -t http://tracker2 http://tracker3 --private /path/to/content not this >torrentfile create --tracker http://tracker /path/to/content #ERROR >torrentfile create -t http://tracker1 http://tracker2 /path/to/content #ERROR the --private flag indicates use by a private tracker the --source flag can be used to help with cross-seeding >torrentfile create --private --source /path/to/content --tracker https://tracker/url to turn off the progress bar shown use --noprogress this can improve the performance by a very small amount >torrentfile -t http://tracker.com --noprogress to specify the save location use the -o or --out flags >torrentfile create -o /specific/path/name.torrent ./content to create files using bittorrent v2 use --meta-version 2 likewise --meta-version 3 creates a hybrid torrent file. >torrentfile create --meta-version 2 /path/to/content >torrentfile create --meta-version 3 /path/to/content to output a magnet URI for the created torrent file use --magnet >torrentfile create --t https://tracker1/annc https://tracker2/annc --magnet /path/to/content Check/Recheck Torrent Using the sub-command recheck or check or r you can check the percentage of a torrent is saved to disk by comparing the the contents to a torrent metafile. recheck torrent file /path/to/some.torrent with /path/to/content enter the metafile path first then the content path (the order matters) >torrentfile recheck /path/to/some.torrent /path/to/content Edit Torrent Using the sub-command edit or e enables editting a pre-existing torrent file. The edit sub-command works the same as the create sub-command and accepts many of the same arguments. Create Magnet To create a magnet URI for a pre-existing torrent meta file, use the sub-command magnet or m with the path to the torrent file. >torrentfile magnet /path/to/some.torrent Interactive Mode Alternatively to supplying a bunch of command line arguments, interactive mode allows users to specify program options one at a time from a series of prompts. to activate interactive mode use -i or --interactive flag >torrentfile -i GUI If you prefer a graphical windowed interface please check out the official GUI frontend here","title":"Examples"},{"location":"examples/#torrentfile","text":"","title":"TorrentFile"},{"location":"examples/#cli-usage-examples","text":"","title":"CLI Usage Examples"},{"location":"examples/#creating-torrents","text":"Using the sub-command create or c TorrentFile can create a new torrent from the contents of a file or directory path. The following examples illustrate some of the options available for creating torrents (AKA meta files). Create a torrent from any file or directory. example ( /path/to/content ) by default the save path will be the content path with a \".torrent\" extension. ( /path/to/content.torrent ) by default torrents are created using bittorrent meta-version 1 >torrentfile create /path/to/content The -t or --tracker flag adds one or more urls to tracker list. This flag will cause an error if the content path immediately follows it. do this >torrentfile create /path/to/content --tracker http://tracker1.com or this >torrentfile create -t http://tracker2 http://tracker3 --private /path/to/content not this >torrentfile create --tracker http://tracker /path/to/content #ERROR >torrentfile create -t http://tracker1 http://tracker2 /path/to/content #ERROR the --private flag indicates use by a private tracker the --source flag can be used to help with cross-seeding >torrentfile create --private --source /path/to/content --tracker https://tracker/url to turn off the progress bar shown use --noprogress this can improve the performance by a very small amount >torrentfile -t http://tracker.com --noprogress to specify the save location use the -o or --out flags >torrentfile create -o /specific/path/name.torrent ./content to create files using bittorrent v2 use --meta-version 2 likewise --meta-version 3 creates a hybrid torrent file. >torrentfile create --meta-version 2 /path/to/content >torrentfile create --meta-version 3 /path/to/content to output a magnet URI for the created torrent file use --magnet >torrentfile create --t https://tracker1/annc https://tracker2/annc --magnet /path/to/content","title":"Creating Torrents"},{"location":"examples/#checkrecheck-torrent","text":"Using the sub-command recheck or check or r you can check the percentage of a torrent is saved to disk by comparing the the contents to a torrent metafile. recheck torrent file /path/to/some.torrent with /path/to/content enter the metafile path first then the content path (the order matters) >torrentfile recheck /path/to/some.torrent /path/to/content","title":"Check/Recheck Torrent"},{"location":"examples/#edit-torrent","text":"Using the sub-command edit or e enables editting a pre-existing torrent file. The edit sub-command works the same as the create sub-command and accepts many of the same arguments.","title":"Edit Torrent"},{"location":"examples/#create-magnet","text":"To create a magnet URI for a pre-existing torrent meta file, use the sub-command magnet or m with the path to the torrent file. >torrentfile magnet /path/to/some.torrent","title":"Create Magnet"},{"location":"examples/#interactive-mode","text":"Alternatively to supplying a bunch of command line arguments, interactive mode allows users to specify program options one at a time from a series of prompts. to activate interactive mode use -i or --interactive flag >torrentfile -i","title":"Interactive Mode"},{"location":"examples/#gui","text":"If you prefer a graphical windowed interface please check out the official GUI frontend here","title":"GUI"}]}